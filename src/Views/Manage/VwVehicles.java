package Views.Manage;
import Connection.Connect;
import Controller.CtrlVehicle;
import Entities.User;
import Entities.Vehicle;
import Models.CustomTableCellRenderer;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Year;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dehr2
 */
public class VwVehicles extends javax.swing.JPanel {

    private User currentUser;
    private DefaultTableModel model = new DefaultTableModel();
    private List<Integer> customers;
    private int filaSeleccionada, idVehiculo;
    private boolean is_selected = false;
    public VwVehicles(User currentUser) {
        this.currentUser = currentUser;
        initComponents();
        setName("Vehicles");
        model.addColumn("ID");
        model.addColumn("ID Cliente");
        model.addColumn("Marca");
        model.addColumn("Año");
        model.addColumn("Modelo");
        tbVehicles.setModel(model);
        scpVehicles.setViewportView(tbVehicles);
        tbVehicles.addMouseListener(new MouseAdapter(){ // Asignar evento de mouse a la tabla de usuarios para seleccionar una fila
            @Override
            public void mouseClicked(MouseEvent e){ // Evento de mouse cuando es clickeada la tabla
                btnEditarValores.setEnabled(true); // Habilitar el boton de editar valores
                btnDelete.setEnabled(true); // Habilitar el boton de actualizar
                filaSeleccionada = tbVehicles.rowAtPoint(e.getPoint()); // Obtener la fila seleccionada
                btnEditarValores.setSelected(false); // Deshabilitar el boton de editar valores
                btnEditarValores.setText("Editar valores"); // Cambiar el texto del boton de editar valores
                cmbCustomer.setEnabled(false); // Deshabilitar el campo de nombre
                txtBrand.setEnabled(false); // Deshabilitar el campo de apellido
                cmbYear.setEnabled(false); // Deshabilitar el campo de e-mail
                txtModel.setEnabled(false);
                btnUpdate.setEnabled(false); // Deshabilitar el boton de actualizar
                loadFields(filaSeleccionada); // Cargar los campos con los datos de la fila seleccionada
            }
        });
        loadCustomers();
        loadYears();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpVehicles = new javax.swing.JScrollPane();
        tbVehicles = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            };
        };
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        labIDSelec = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbYear = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        txtModel = new javax.swing.JTextField();
        txtBrand = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnEditarValores = new javax.swing.JToggleButton();
        btnDelete = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(65, 80, 87));

        tbVehicles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbVehicles.getTableHeader().setReorderingAllowed(false);
        tbVehicles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbVehicles.setMaximumSize(new java.awt.Dimension(80, 80));
        scpVehicles.setViewportView(tbVehicles);

        jPanel4.setBackground(new java.awt.Color(65, 80, 87));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setPreferredSize(new java.awt.Dimension(500, 230));

        jLabel8.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel8.setText("Cliente:");

        jLabel1.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel1.setText("ID seleccionado:");

        labIDSelec.setFont(new java.awt.Font("Bahnschrift", 1, 15)); // NOI18N
        labIDSelec.setText("-");

        cmbCustomer.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCustomer.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel9.setText("Marca:");

        jLabel10.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel10.setText("Año:");

        cmbYear.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbYear.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel11.setText("Modelo:");

        txtModel.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txtModel.setEnabled(false);
        txtModel.setPreferredSize(new java.awt.Dimension(120, 22));
        txtModel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtModelKeyTyped(evt);
            }
        });

        txtBrand.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txtBrand.setToolTipText("");
        txtBrand.setEnabled(false);
        txtBrand.setName("Marca"); // NOI18N
        txtBrand.setPreferredSize(new java.awt.Dimension(150, 28));
        txtBrand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBrandKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBrand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbYear, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labIDSelec))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labIDSelec))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        btnUpdate.setBackground(new java.awt.Color(0, 255, 0));
        btnUpdate.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        btnUpdate.setText("Actualizar");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnEditarValores.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        btnEditarValores.setText("Editar valores");
        btnEditarValores.setEnabled(false);
        btnEditarValores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditarValoresMouseClicked(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 102));
        btnDelete.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Borrar Registro");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEditarValores, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEditarValores, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(171, 171, 171)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(178, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(41, 41, 41))
        );

        jPanel13.setBackground(new java.awt.Color(65, 80, 87));
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setPreferredSize(new java.awt.Dimension(500, 230));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scpVehicles, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(396, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(364, 364, 364)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE))
                    .addContainerGap(38, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarValoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarValoresMouseClicked
        if(btnEditarValores.isSelected()){ //si esta seleccionado el boton
            if(is_selected){ //si hay una fila seleccionada
                cmbCustomer.setEnabled(true); //habilitar el campo de nombre
                txtBrand.setEnabled(true); //habilitar el campo de apellido
                cmbYear.setEnabled(true); //habilitar el campo de e-mail
                txtModel.setEnabled(true);
                btnUpdate.setEnabled(true); //habilitar el boton de actualizar
                btnEditarValores.setText("Cancelar edición"); //cambiar el texto del boton
            }
        }else{
            if(is_selected){ //si hay una fila seleccionada
                cmbCustomer.setEnabled(false); //habilitar el campo de nombre
                txtBrand.setEnabled(false); //habilitar el campo de apellido
                cmbYear.setEnabled(false); //habilitar el campo de e-mail
                txtModel.setEnabled(false);
                btnUpdate.setEnabled(false); //habilitar el boton de actualizar
                btnEditarValores.setText("Editar valores"); //cambiar el texto del boton
                loadFields(filaSeleccionada); //cargar los campos
            }
        }
    }//GEN-LAST:event_btnEditarValoresMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        CtrlVehicle ctrlVehicle = new CtrlVehicle();
        if(!isFilled()){
            JOptionPane.showMessageDialog(null, "Llena todos los campos", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String brand = txtBrand.getText(),
        model = txtModel.getText();
        int year = Integer.parseInt(cmbYear.getSelectedItem().toString()),
            customer_id = customers.get(cmbCustomer.getSelectedIndex() - 1);
        Vehicle vehicleObj = new Vehicle(idVehiculo, customer_id, year, brand, model);
        if(ctrlVehicle.update(vehicleObj, currentUser)){
            btnDelete.setEnabled(true);
            btnEditarValores.setEnabled(false);
            btnEditarValores.setText("Editar valores");
            cmbCustomer.setEnabled(false);
            txtBrand.setEnabled(false);
            cmbYear.setEnabled(false);
            txtModel.setEnabled(false);
            btnUpdate.setEnabled(false);
            loadTable();
            JOptionPane.showMessageDialog(null, "Actalización exitosa"); //Muestra un mensaje de completado
        }else
        JOptionPane.showMessageDialog(null, "Error al actualizar el registro seleccionado", "Fallo de actualización", JOptionPane.ERROR_MESSAGE); //Muestra un mensaje de error
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        CtrlVehicle ctrlVehicle = new CtrlVehicle();
        if(is_selected){
            if(JOptionPane.YES_OPTION ==JOptionPane.showConfirmDialog(
                null,
                "Desea eliminar el registro seleccionado?\n(Esta acción no se puede deshacer)",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE)) //Muestra un mensaje de confirmacion para eliminar
                if(ctrlVehicle.delete(new Vehicle(idVehiculo), currentUser)){ //Elimina el registro en la base de datos
                    loadTable(); //Carga la tabla de conductores
                    JOptionPane.showMessageDialog(null, "Registro eliminado correctamente"); //Muestra un mensaje de completado
                }else{ //Si no se elimino
            JOptionPane.showMessageDialog(null, "Error al eliminar el registro seleccionado","Fallo de eliminación", JOptionPane.ERROR_MESSAGE); //Muestra un mensaje de error
                }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtBrandKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBrandKeyTyped
        char keyChar = evt.getKeyChar();
        int longitudCadena = txtBrand.getText().length();
        if (!(Character.isAlphabetic(keyChar) || keyChar == ' ')){
            evt.consume();
        }else{
            if(longitudCadena == 0 && keyChar == ' ')
                evt.consume();
            if(longitudCadena >= 1){
                if(keyChar == ' ' && txtBrand.getText().charAt(longitudCadena - 1) == ' '){
                    evt.consume();
                }
            }
        }
        if(txtBrand.getText().length() >= 15)
            evt.consume();
    }//GEN-LAST:event_txtBrandKeyTyped

    private void txtModelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModelKeyTyped
        char keyChar = evt.getKeyChar();
        int longitudCadena = txtModel.getText().length();
        if (!(Character.isLetterOrDigit(keyChar) || keyChar == ' ' || keyChar == '-')){
            evt.consume();
        }else{
            if(longitudCadena == 0 && keyChar == ' ')
                evt.consume();
            if(longitudCadena >= 1){
                if(keyChar == ' ' && txtModel.getText().charAt(longitudCadena - 1) == ' '){
                    evt.consume();
                }
                if(keyChar == '-' && txtModel.getText().charAt(longitudCadena - 1) == '-'){
                    evt.consume();
                }
            }
        }
        if(txtModel.getText().length() >= 15)
            evt.consume();
    }//GEN-LAST:event_txtModelKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JToggleButton btnEditarValores;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JComboBox<String> cmbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel labIDSelec;
    private javax.swing.JScrollPane scpVehicles;
    private javax.swing.JTable tbVehicles;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtModel;
    // End of variables declaration//GEN-END:variables
    private void loadTable(){
        Connection cn = Connect.connect(currentUser);
        String query = "SELECT id_vehiculo, cliente_id, marca_vehiculo, anio_vehiculo, modelo_vehiculo FROM vehiculo"; //Query para cargar la tabla de autobuses
        try(PreparedStatement st = cn.prepareStatement(query)){ //Prepara la sentencia
            ResultSet rs = st.executeQuery(); //Ejecuta la sentencia
            while(model.getRowCount()>0){ //Elimina todas las filas de la tabla
                model.removeRow(0); //Elimina la fila 
            }

            while(rs.next()){ //Recorre el resultado
                Object fila[] = new Object[5]; //Crea un arreglo de objetos
                for(byte i = 0; i < 5; i++){ //Recorre el arreglo
                    fila[i] = rs.getObject(i+1); //Asigna el valor correspondiente
                } 
                model.addRow(fila); //Agrega la fila al modelo
            }
            st.close(); //Cierra la sentencia
            cn.close(); //Cierra la base de datos
        }catch(SQLException e){ //Si hay un error
            System.out.println("Carga de datos fallida " + e); //Imprime un mensaje de error
        }
        for (int i = 0; i < tbVehicles.getColumnCount(); i++) {
            tbVehicles.getColumnModel().getColumn(i).setHeaderRenderer(new CustomTableCellRenderer());
        }
        tbVehicles.setDefaultRenderer(java.lang.Object.class, new CustomTableCellRenderer());
        is_selected = false;
    }

    private void loadCustomers(){ //Carga el combo de rutas
        customers = new ArrayList<>(); //Crea una lista de enteros para los ids de las rutas
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT cliente_nombre, cliente_id FROM cliente"; //Query para cargar el combo
        Statement st; //Crea el Statement
        try{ 
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query);  //Ejecuta la consulta

            cmbCustomer.removeAllItems(); //Limpia el combo box
            cmbCustomer.addItem("Seleccione un cliente"); //Añade un item al combo box
            while(rs.next()){ //Recorre el resultado
                cmbCustomer.addItem((String)(rs.getString("cliente_id") + " - " + rs.getString("cliente_nombre"))); //Añade el nombre de la ruta al combo box
                customers.add(rs.getInt("cliente_id")); //Guarda el id de la ruta en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de clientes" + e); //Imprime un mensaje de error
        }
    }
    private void loadYears(){ //Carga los anios
        cmbYear.removeAllItems(); //Limpia el combobox
        cmbYear.addItem("Seleccione un año"); //Agrega un elemento al combobox
        for(int i = 1990; i <= Year.now().getValue(); i++) //Carga el combobox con los anios del 1990 al anio actual
            cmbYear.addItem(Integer.toString(i)); //Agrega el anio al combobox
    }

    private void loadFields(int fila){
        if(fila > -1){ 
            is_selected = true; //Habilita la seleccion
            btnEditarValores.setEnabled(true);
            idVehiculo = (int) model.getValueAt(fila, 0);
            cmbCustomer.setSelectedIndex(customers.indexOf((int)model.getValueAt(fila, 1)) + 1);
            labIDSelec.setText(String.valueOf(idVehiculo));
            txtBrand.setText((String)model.getValueAt(fila, 2));
            cmbYear.setSelectedItem(String.valueOf(model.getValueAt(fila, 3)));
            txtModel.setText((String)model.getValueAt(fila, 4));
        }
    }

    private boolean isFilled(){
        if(cmbCustomer.getSelectedIndex() == 0||
            txtBrand.getText().isEmpty()||
            cmbYear.getSelectedIndex() == 0||
            txtModel.getText().isEmpty()){
            return false;
        }else{
            return true;
        }
    }
}
