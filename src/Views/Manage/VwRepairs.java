package Views.Manage;
import Connection.Connect;
import Controller.CtrlRepair;
import Entities.Repair;
import Entities.User;
import Models.CustomTableCellRenderer;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VwRepairs extends javax.swing.JPanel {

    private User currentUser;
    private DefaultTableModel model = new DefaultTableModel();
    private List<Integer> customers_ids;
    private List<Integer> vehicles_ids;
    private List<Integer> kOfRepairs_ids;
    private List<String> repairDescriptionsList;
    private List<BigDecimal> repairCostsList;
    private Map<Integer, String> additionalNotes;
    private int filaSeleccionada, idRepair;
    private boolean is_selected = false;
    public VwRepairs(User currentUser) {
        this.currentUser = currentUser;
        initComponents();
        setName("Repairs");
        model.addColumn("ID");
        model.addColumn("ID Cliente");
        model.addColumn("ID Vehiculo");
        model.addColumn("Tipo de Reparación");
        model.addColumn("Fecha de ingreso");
        model.addColumn("Fecha de salida");
        model.addColumn("% de coste");
        model.addColumn("Coste total");
        tbRepairs.setModel(model);
        scpRepairs.setViewportView(tbRepairs);
        tbRepairs.addMouseListener(new MouseAdapter(){ // Asignar evento de mouse a la tabla de usuarios para seleccionar una fila
            @Override
            public void mouseClicked(MouseEvent e){ // Evento de mouse cuando es clickeada la tabla
                btnEditarValores.setEnabled(true); // Habilitar el boton de editar valores
                btnDelete.setEnabled(true); // Habilitar el boton de actualizar
                filaSeleccionada = tbRepairs.rowAtPoint(e.getPoint()); // Obtener la fila seleccionada
                btnEditarValores.setSelected(false); // Deshabilitar el boton de editar valores
                btnEditarValores.setText("Editar valores"); // Cambiar el texto del boton de editar valores
                cmbCustomer.setEnabled(false); // Deshabilitar el campo de nombre
                cmbVehicle.setEnabled(false);
                cmbKindOfRepair.setEnabled(false);
                txtDateDelivery.setEnabled(false);
                txtDateReception.setEnabled(false);
                txtPercCost.setEnabled(false);
                txtAreaAdditionalAnotations.setEnabled(false);
                btnUpdate.setEnabled(false); // Deshabilitar el boton de actualizar
                loadFields(filaSeleccionada); // Cargar los campos con los datos de la fila seleccionada
            }
        });
        loadCustomers();
        loadTable();
        loadKindOfRepairs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpRepairs = new javax.swing.JScrollPane();
        tbRepairs = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            };
        };
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        labIDSelec = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cmbVehicle = new javax.swing.JComboBox<>();
        cmbKindOfRepair = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtPercCost = new javax.swing.JTextField();
        lblTotalCost = new javax.swing.JLabel();
        txtDateReception = new javax.swing.JTextField();
        txtDateDelivery = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txAreaRepairDesc = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaAdditionalAnotations = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnEditarValores = new javax.swing.JToggleButton();
        btnDelete = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(65, 80, 87));

        tbRepairs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbRepairs.getTableHeader().setReorderingAllowed(false);
        tbRepairs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbRepairs.setMaximumSize(new java.awt.Dimension(80, 80));
        scpRepairs.setViewportView(tbRepairs);

        jPanel4.setBackground(new java.awt.Color(65, 80, 87));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setPreferredSize(new java.awt.Dimension(500, 230));

        jLabel8.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel8.setText("Cliente:");

        jLabel1.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel1.setText("ID seleccionado:");

        labIDSelec.setFont(new java.awt.Font("Bahnschrift", 1, 15)); // NOI18N
        labIDSelec.setText("-");

        cmbCustomer.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCustomer.setEnabled(false);
        cmbCustomer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCustomerItemStateChanged(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel12.setText("Vehículo:");

        cmbVehicle.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbVehicle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbVehicle.setEnabled(false);

        cmbKindOfRepair.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbKindOfRepair.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbKindOfRepair.setEnabled(false);
        cmbKindOfRepair.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbKindOfRepairItemStateChanged(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel13.setText("Tipo de Reparación:");

        jLabel14.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel14.setText("Fecha de entrada:");

        jLabel15.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel15.setText("Fecha de salida:");

        jLabel16.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel16.setText("Porcentaje de costo:");

        txtPercCost.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txtPercCost.setEnabled(false);
        txtPercCost.setPreferredSize(new java.awt.Dimension(120, 22));
        txtPercCost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPercCostFocusLost(evt);
            }
        });
        txtPercCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPercCostActionPerformed(evt);
            }
        });
        txtPercCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPercCostKeyTyped(evt);
            }
        });

        lblTotalCost.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        lblTotalCost.setText("$");

        txtDateReception.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        txtDateReception.setToolTipText("La fecha de entrada se asigna automáticamente al registrar una reparación.");
        txtDateReception.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtDateReception.setFocusable(false);

        txtDateDelivery.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        txtDateDelivery.setToolTipText("La fecha de salida se asigna automáticamente como pendiente al registrar\nuna reparación y se actualiza automáticamente al darla por finalizada.");
        txtDateDelivery.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtDateDelivery.setFocusable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbVehicle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(txtDateReception))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(txtDateDelivery))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(18, 18, 18)
                                .addComponent(txtPercCost, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblTotalCost))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labIDSelec))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbKindOfRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labIDSelec))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbKindOfRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtDateReception, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtDateDelivery, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtPercCost, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalCost))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        txAreaRepairDesc.setColumns(20);
        txAreaRepairDesc.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        txAreaRepairDesc.setRows(5);
        txAreaRepairDesc.setText("Seleccione un tipo de reparación...");
        txAreaRepairDesc.setEditable(false);
        txAreaRepairDesc.setFocusable(false);
        jScrollPane1.setViewportView(txAreaRepairDesc);

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel2.setText("Notas adicionales:");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtAreaAdditionalAnotations.setColumns(20);
        txtAreaAdditionalAnotations.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        txtAreaAdditionalAnotations.setRows(5);
        txtAreaAdditionalAnotations.setToolTipText("Este campo puede quedar vacío si lo desea.");
        txtAreaAdditionalAnotations.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAreaAdditionalAnotations.setEnabled(false);
        txtAreaAdditionalAnotations.setLineWrap(true);
        txtAreaAdditionalAnotations.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaAdditionalAnotationsKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtAreaAdditionalAnotations);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnUpdate.setBackground(new java.awt.Color(0, 255, 0));
        btnUpdate.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        btnUpdate.setText("Actualizar");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnEditarValores.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        btnEditarValores.setText("Editar valores");
        btnEditarValores.setEnabled(false);
        btnEditarValores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditarValoresMouseClicked(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 102));
        btnDelete.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Borrar Registro");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEditarValores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEditarValores, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        jPanel13.setBackground(new java.awt.Color(65, 80, 87));
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setPreferredSize(new java.awt.Dimension(500, 230));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 573, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(24, Short.MAX_VALUE)))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(36, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scpRepairs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1540, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpRepairs, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(396, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(364, 364, 364)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                        .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
                    .addContainerGap(14, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarValoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarValoresMouseClicked
        if(btnEditarValores.isSelected()){ //si esta seleccionado el boton
            if(is_selected){ //si hay una fila seleccionada
                cmbCustomer.setEnabled(true); //habilitar el campo de nombre
                cmbKindOfRepair.setEnabled(true); //habilitar el campo de apellido
                cmbVehicle.setEnabled(true); //habilitar el campo de e-mail
                txtDateDelivery.setEnabled(true);
                txtDateReception.setEnabled(true);
                txtPercCost.setEnabled(true);
                txtAreaAdditionalAnotations.setEnabled(true);
                btnUpdate.setEnabled(true); //habilitar el boton de actualizar
                btnEditarValores.setText("Cancelar edición"); //cambiar el texto del boton
            }
        }else{
            if(is_selected){ //si hay una fila seleccionada
                cmbCustomer.setEnabled(false); //habilitar el campo de nombre
                cmbKindOfRepair.setEnabled(false); //habilitar el campo de apellido
                cmbVehicle.setEnabled(false); //habilitar el campo de e-mail
                txtDateDelivery.setEnabled(false);
                txtDateReception.setEnabled(false);
                txtPercCost.setEnabled(false);
                txtAreaAdditionalAnotations.setEnabled(false);
                btnUpdate.setEnabled(false); //habilitar el boton de actualizar
                loadFields(filaSeleccionada); //cargar los campos
                btnEditarValores.setText("Editar valores"); //cambiar el texto del boton
            }
        }
    }//GEN-LAST:event_btnEditarValoresMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        CtrlRepair ctrlRepair = new CtrlRepair();
        //getParent().get
        if(!isFilled()){
            JOptionPane.showMessageDialog(null, "Llena todos los campos", "Campos incompletos", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int customerId = customers_ids.get(cmbCustomer.getSelectedIndex() - 1),
            vehicleId = vehicles_ids.get(cmbVehicle.getSelectedIndex() - 1),
            kOfRepId = kOfRepairs_ids.get(cmbKindOfRepair.getSelectedIndex() - 1);
        BigDecimal costPercentage = new BigDecimal(txtPercCost.getText());
        String addNotes = txtAreaAdditionalAnotations.getText().isEmpty() ? null : txtAreaAdditionalAnotations.getText();
        BigDecimal totalCost = new BigDecimal(lblTotalCost.getText().replace("$", ""));
        Repair repair = new Repair(idRepair, customerId, vehicleId, kOfRepId, costPercentage, totalCost, addNotes);
        if(ctrlRepair.update(repair, currentUser)){
            btnDelete.setEnabled(true);
            btnEditarValores.setEnabled(false);
            btnEditarValores.setText("Editar valores");
            cmbCustomer.setEnabled(false); // Deshabilitar el campo de nombre
            cmbVehicle.setEnabled(false);
            cmbKindOfRepair.setEnabled(false);
            txtDateDelivery.setEnabled(false);
            txtDateReception.setEnabled(false);
            txtPercCost.setEnabled(false);
            txtAreaAdditionalAnotations.setEnabled(false);
            btnUpdate.setEnabled(false);
            loadTable();
            JOptionPane.showMessageDialog(null, "Actalización exitosa"); //Muestra un mensaje de completado
        }else
        JOptionPane.showMessageDialog(null, "Error al actualizar el registro seleccionado", "Fallo de actualización", JOptionPane.ERROR_MESSAGE); //Muestra un mensaje de error
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        CtrlRepair ctrlRepair = new CtrlRepair();
        if(is_selected){
            if(JOptionPane.YES_OPTION ==JOptionPane.showConfirmDialog(
                null,
                "Desea eliminar el registro seleccionado?\n(Esta acción no se puede deshacer)",
                "Confirmar eliminación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE)) //Muestra un mensaje de confirmacion para eliminar
        if(ctrlRepair.delete(new Repair(idRepair), currentUser)){ //Elimina el registro en la base de datos
            loadTable(); //Carga la tabla de conductores
            JOptionPane.showMessageDialog(null, "Registro eliminado correctamente"); //Muestra un mensaje de completado
        }else{ //Si no se elimino
            JOptionPane.showMessageDialog(null, "Error al eliminar el registro seleccionado","Fallo de eliminación", JOptionPane.ERROR_MESSAGE); //Muestra un mensaje de error
        }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbCustomerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCustomerItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) { //Verifica que se haya seleccionado un elemento
            if(cmbCustomer.getSelectedIndex() == 0){ //Verifica que se haya seleccionado una ruta
                cmbVehicle.removeAllItems(); //Limpia el combo box de placas
                cmbVehicle.addItem("Seleccione un cliente");
                cmbVehicle.setEnabled(false); //Desactiva el combo box de placas
            }else{ //Carga el combo box con las placas
                loadVehicles(customers_ids.get(cmbCustomer.getSelectedIndex()-1)); //Carga el combo box con las placas
                if(cmbCustomer.isEnabled())
                    cmbVehicle.setEnabled(true);
                if(cmbVehicle.getItemCount() == 1){
                    cmbVehicle.removeAllItems();
                    cmbVehicle.addItem("El cliente no tiene vehículos registrados");
                    cmbVehicle.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_cmbCustomerItemStateChanged

    private void cmbKindOfRepairItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKindOfRepairItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) { //Verifica que se haya seleccionado un elemento
            if(cmbKindOfRepair.getSelectedIndex() == 0){ //Verifica que se haya seleccionado una ruta
                txAreaRepairDesc.setText("Seleccione un tipo de reparación...");
                txtPercCost.setEnabled(false);
                txtPercCost.setText("");
                lblTotalCost.setText("$ 0");
            }else{ //Carga el combo box con las placas
                txAreaRepairDesc.setText(repairDescriptionsList.get(cmbKindOfRepair.getSelectedIndex() - 1));
                if(cmbKindOfRepair.isEnabled())
                    txtPercCost.setEnabled(true);
                txtPercCost.setText("100");
                lblTotalCost.setText("$" + (new BigDecimal(txtPercCost.getText().isEmpty() ? 0 : (Float.valueOf(txtPercCost.getText())/100)).multiply(repairCostsList.get(cmbKindOfRepair.getSelectedIndex()-1)).setScale(2, RoundingMode.HALF_UP)));

            }
        }
    }//GEN-LAST:event_cmbKindOfRepairItemStateChanged

    private void txtPercCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPercCostKeyTyped
        int key = evt.getKeyChar();  
        int count = 0;
        for(int i = 0; i < txtPercCost.getText().length(); i++)
            if(txtPercCost.getText().charAt(i) == '.')
                count++;
        if (!((key >= 48 && key <= 57) || key == '.') || (key == '.' && count >= 1))
            evt.consume();
        if(txtPercCost.getText().isEmpty() && key == '.')
            evt.consume();
        if(txtPercCost.getText().contains(".")){
            if(txtPercCost.getText().substring(txtPercCost.getText().indexOf('.'), txtPercCost.getText().length()).length() >= 3)
                evt.consume();
        }
        else{
            if(txtPercCost.getText().length() >= 3 && key != '.')
                evt.consume();
        }
    }//GEN-LAST:event_txtPercCostKeyTyped

    private void txtPercCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPercCostActionPerformed
        lblTotalCost.setText("$" + (new BigDecimal(txtPercCost.getText().isEmpty() ? 0 : (Float.valueOf(txtPercCost.getText())/100)).multiply(repairCostsList.get(cmbKindOfRepair.getSelectedIndex()-1)).setScale(2, RoundingMode.HALF_UP)));
    }//GEN-LAST:event_txtPercCostActionPerformed

    private void txtAreaAdditionalAnotationsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaAdditionalAnotationsKeyTyped
        if(txtAreaAdditionalAnotations.getText().length() >= 170)
            evt.consume();
    }//GEN-LAST:event_txtAreaAdditionalAnotationsKeyTyped

    private void txtPercCostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPercCostFocusLost
        lblTotalCost.setText("$" + (new BigDecimal(txtPercCost.getText().isEmpty() ? 0 : (Float.valueOf(txtPercCost.getText())/100)).multiply(repairCostsList.get(cmbKindOfRepair.getSelectedIndex()-1)).setScale(2, RoundingMode.HALF_UP)));
    }//GEN-LAST:event_txtPercCostFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JToggleButton btnEditarValores;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JComboBox<String> cmbKindOfRepair;
    private javax.swing.JComboBox<String> cmbVehicle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labIDSelec;
    private javax.swing.JLabel lblTotalCost;
    private javax.swing.JScrollPane scpRepairs;
    private javax.swing.JTable tbRepairs;
    private javax.swing.JTextArea txAreaRepairDesc;
    private javax.swing.JTextArea txtAreaAdditionalAnotations;
    private javax.swing.JTextField txtDateDelivery;
    private javax.swing.JTextField txtDateReception;
    private javax.swing.JTextField txtPercCost;
    // End of variables declaration//GEN-END:variables
private void loadTable(){
    additionalNotes = new HashMap<>();
    Connection cn = Connect.connect(currentUser);
    String query = "SELECT rep_id, cliente_id, vehiculo_id, tipo_reparacion_id, reparacion_fecha_ingreso, reparacion_fecha_salida, reparacion_porcentaje_costo, reparacion_coste_total, rep_notas_adicionales FROM reparacion"; //Query para cargar la tabla de autobuses
        try(PreparedStatement st = cn.prepareStatement(query)){ //Prepara la sentencia
            ResultSet rs = st.executeQuery(); //Ejecuta la sentencia
            while(model.getRowCount()>0){ //Elimina todas las filas de la tabla
                model.removeRow(0); //Elimina la fila
            }

            while(rs.next()){ //Recorre el resultado
                Object fila[] = new Object[8]; //Crea un arreglo de objetos
                for(byte i = 0; i < 8; i++){ //Recorre el arreglo
                    if(rs.getObject(i+1) != null)
                        fila[i] = rs.getObject(i+1); //Asigna el valor correspondiente
                    else
                        if(i == 5)
                            fila[i] = "Pendiente";
                }
                additionalNotes.put(rs.getInt("rep_id"), rs.getString("rep_notas_adicionales"));
                model.addRow(fila); //Agrega la fila al modelo
            }
            st.close(); //Cierra la sentencia
            cn.close(); //Cierra la base de datos
        }catch(SQLException e){ //Si hay un error
            System.out.println("Carga de datos fallida " + e); //Imprime un mensaje de error
        }
        for (int i = 0; i < tbRepairs.getColumnCount(); i++) {
            tbRepairs.getColumnModel().getColumn(i).setHeaderRenderer(new CustomTableCellRenderer());
        }
        tbRepairs.setDefaultRenderer(java.lang.Object.class, new CustomTableCellRenderer());
        is_selected = false;
}

private void loadCustomers(){ //Carga el combo de rutas
        customers_ids = new ArrayList<>(); //Crea una lista de enteros para los ids de las rutas
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT cliente_nombre, cliente_id FROM cliente"; //Query para cargar el combo
        Statement st; //Crea el Statement
        try{ 
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query);  //Ejecuta la consulta
            
            cmbCustomer.removeAllItems(); //Limpia el combo box
            cmbCustomer.addItem("Seleccione un cliente"); //Añade un item al combo box
            while(rs.next()){ //Recorre el resultado
                cmbCustomer.addItem((String)(rs.getString("cliente_id") + " - " + rs.getString("cliente_nombre"))); //Añade el nombre de la ruta al combo box
                customers_ids.add(rs.getInt("cliente_id")); //Guarda el id de la ruta en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de CLIENTES " + e); //Imprime un mensaje de error
        }
    }

private void loadVehicles(int id_cliente){ //Carga el horario de la ruta seleccionada en los txt
        vehicles_ids = new ArrayList<>(); //Lista de enteros para guardar el id del autobus
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT * FROM vehiculo WHERE cliente_id =" + id_cliente; //Crea la consulta
        Statement st; //Crea el Statement
        try{
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query); //Ejecuta la consulta
             
            cmbVehicle.removeAllItems(); //Limpia el combo box
            cmbVehicle.addItem("Seleccione un vehiculo"); //Añade un item al combo box
            
            while(rs.next()){ //Recorre el resultado
                cmbVehicle.addItem(rs.getString("marca_vehiculo") + ' ' + rs.getString("modelo_vehiculo") + ' ' + rs.getString("anio_vehiculo")); //Añade la placa del autobus al combo box
                vehicles_ids.add(rs.getInt("id_vehiculo")); //Guarda el id del autobus en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de placas de VEHICULOS "+ e); //Imprime un mensaje de error
        }
    }

private void loadKindOfRepairs(){ //Carga el combo de rutas
        kOfRepairs_ids = new ArrayList<>(); //Crea una lista de enteros para los ids de las rutas
        repairDescriptionsList = new ArrayList<>();
        repairCostsList = new ArrayList<>();
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT tipo_reparacion_id, t_rep_nombre, t_rep_descripcion, t_rep_costo_total FROM tipo_reparacion"; //Query para cargar el combo
        Statement st; //Crea el Statement
        try{ 
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query);  //Ejecuta la consulta
            
            cmbKindOfRepair.removeAllItems(); //Limpia el combo box
            cmbKindOfRepair.addItem("Seleccione una reparación"); //Añade un item al combo box
            while(rs.next()){ //Recorre el resultado
                cmbKindOfRepair.addItem((String)(rs.getString("t_rep_nombre"))); //Añade el nombre de la ruta al combo box
                repairCostsList.add(rs.getBigDecimal("t_rep_costo_total"));
                repairDescriptionsList.add(rs.getString("t_rep_descripcion") + '\n' + '$' + rs.getFloat("t_rep_costo_total"));
                kOfRepairs_ids.add(rs.getInt("tipo_reparacion_id")); //Guarda el id de la ruta en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de TiposREPARACION " + e); //Imprime un mensaje de error
        }
    }

private void loadFields(int fila){
    if(fila > -1){ 
            is_selected = true; //Habilita la seleccion
            btnEditarValores.setEnabled(true);
            idRepair = (int) model.getValueAt(fila, 0);
            labIDSelec.setText(String.valueOf(idRepair));
            cmbCustomer.setSelectedIndex(customers_ids.indexOf((int)model.getValueAt(fila, 1)) + 1);
            cmbVehicle.setSelectedIndex(vehicles_ids.indexOf((int)model.getValueAt(fila, 2)) + 1);
            cmbKindOfRepair.setSelectedIndex(kOfRepairs_ids.indexOf((int)model.getValueAt(fila, 3)) + 1);
            txtDateReception.setText(String.valueOf(model.getValueAt(fila, 4)));
            txtDateDelivery.setText(String.valueOf(model.getValueAt(fila, 5)));
            txtPercCost.setText(((BigDecimal)model.getValueAt(fila, 6)).toString());
            lblTotalCost.setText("$" + (((BigDecimal)model.getValueAt(fila, 6)).divide(new BigDecimal("100"))).multiply(repairCostsList.get(kOfRepairs_ids.indexOf((int)model.getValueAt(fila, 3)))).setScale(2, RoundingMode.HALF_UP));
            txtAreaAdditionalAnotations.setText(additionalNotes.get(idRepair));
        }
}

private boolean isFilled(){
    if(cmbCustomer.getSelectedIndex() == 0||
        cmbVehicle.getSelectedIndex() == 0 ||
        cmbKindOfRepair.getSelectedIndex() == 0 ||
        txtPercCost.getText().isEmpty() ||
        new BigDecimal(txtPercCost.getText()).compareTo(new BigDecimal("0")) <= 0){
            return false;
        }else{
            return true;
        }
}

}