package Views.Register;

import Connection.Connect;
import Controller.CtrlRepair;
import Entities.Repair;
import Entities.User;
import java.awt.event.ItemEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

public class VwRepairsRegister extends javax.swing.JPanel {
    
    private User currentUser;
    private List<Integer> customers_ids;
    private List<Integer> vehicles_ids;
    private List<Integer> kOfRepairs_ids;
    private List<String> repairDescriptionsList;
    private List<BigDecimal> repairCostsList;
    
    public VwRepairsRegister(User currentUser) {
        this.currentUser = currentUser;
        initComponents();
        setName("RepairsRegister");
        
        loadCustomers();
        loadKindOfRepairs();
        LocalDate asd = LocalDate.now();
        txtDateReception.setText(asd.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaAdditionalAnotations = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        btnRegistrar = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cmbVehicle = new javax.swing.JComboBox<>();
        cmbKindOfRepair = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtPercCost = new javax.swing.JTextField();
        lblTotalCost = new javax.swing.JLabel();
        txtDateReception = new javax.swing.JTextField();
        txtDateDelivery = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txAreaRepairDesc = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(65, 80, 87));

        jPanel3.setBackground(new java.awt.Color(65, 80, 87));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(500, 230));

        jLabel3.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel3.setText("Notas adicionales:");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtAreaAdditionalAnotations.setColumns(20);
        txtAreaAdditionalAnotations.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        txtAreaAdditionalAnotations.setRows(5);
        txtAreaAdditionalAnotations.setToolTipText("Este campo puede quedar vacío si lo desea.");
        txtAreaAdditionalAnotations.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAreaAdditionalAnotations.setLineWrap(true);
        txtAreaAdditionalAnotations.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaAdditionalAnotationsKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtAreaAdditionalAnotations);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnRegistrar.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(btnRegistrar)
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnRegistrar)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jLabel9.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel9.setText("Cliente:");

        cmbCustomer.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCustomer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCustomerItemStateChanged(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel12.setText("Vehículo:");

        cmbVehicle.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbVehicle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbKindOfRepair.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        cmbKindOfRepair.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbKindOfRepair.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbKindOfRepairItemStateChanged(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel13.setText("Tipo de Reparación:");

        jLabel14.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel14.setText("Fecha de entrada:");

        jLabel15.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel15.setText("Fecha de salida:");

        jLabel16.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel16.setText("Porcentaje de costo:");

        txtPercCost.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        txtPercCost.setPreferredSize(new java.awt.Dimension(120, 22));
        txtPercCost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPercCostFocusLost(evt);
            }
        });
        txtPercCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPercCostActionPerformed(evt);
            }
        });
        txtPercCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPercCostKeyTyped(evt);
            }
        });

        lblTotalCost.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        lblTotalCost.setText("$");

        txtDateReception.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        txtDateReception.setToolTipText("La fecha de entrada se asigna automáticamente al registrar una reparación.");
        txtDateReception.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtDateReception.setFocusable(false);

        txtDateDelivery.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        txtDateDelivery.setText("No disponible");
        txtDateDelivery.setToolTipText("La fecha de salida se asigna automáticamente como pendiente al registrar\nuna reparación y se actualiza automáticamente al darla por finalizada.");
        txtDateDelivery.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtDateDelivery.setFocusable(false);

        txAreaRepairDesc.setColumns(20);
        txAreaRepairDesc.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        txAreaRepairDesc.setRows(5);
        txAreaRepairDesc.setText("Seleccione un tipo de reparación...");
        txAreaRepairDesc.setEditable(false);
        txAreaRepairDesc.setFocusable(false);
        jScrollPane1.setViewportView(txAreaRepairDesc);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbVehicle, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(txtDateReception))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addComponent(txtDateDelivery))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(18, 18, 18)
                                .addComponent(txtPercCost, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblTotalCost))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbKindOfRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbKindOfRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtDateReception, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtDateDelivery, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtPercCost, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotalCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(610, 610, 610))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(118, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(300, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 872, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        CtrlRepair ctrlRepair = new CtrlRepair();
        if(!isFilled()){
            JOptionPane.showMessageDialog(null, "Llena todos los campos");
            return;
        }
        int customerId = customers_ids.get(cmbCustomer.getSelectedIndex() - 1),
            vehicleId = vehicles_ids.get(cmbVehicle.getSelectedIndex() - 1),
            kOfRepId = kOfRepairs_ids.get(cmbKindOfRepair.getSelectedIndex() - 1);
        BigDecimal costPercentage = new BigDecimal(txtPercCost.getText());
        String addNotes = txtAreaAdditionalAnotations.getText().isEmpty() ? null : txtAreaAdditionalAnotations.getText();
        BigDecimal totalCost = new BigDecimal(lblTotalCost.getText().replace("$", ""));
        Repair repair = new Repair(0, customerId, vehicleId, kOfRepId, costPercentage, totalCost, addNotes);
        if(ctrlRepair.add(repair, currentUser)){
            cmbCustomer.setSelectedIndex(0);
            cmbKindOfRepair.setSelectedIndex(0);
            txtPercCost.setText("0");
            lblTotalCost.setText("$");
            txtAreaAdditionalAnotations.setText("");
            JOptionPane.showMessageDialog(null, "Reparación registrada");
        }else{
            JOptionPane.showMessageDialog(null, "Error al registrar la reparación", "Error de registro", JOptionPane.WARNING_MESSAGE);
        }
        
        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void txtAreaAdditionalAnotationsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaAdditionalAnotationsKeyTyped
        if(txtAreaAdditionalAnotations.getText().length() >= 170)
        evt.consume();
    }//GEN-LAST:event_txtAreaAdditionalAnotationsKeyTyped

    private void txtPercCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPercCostKeyTyped
        int key = evt.getKeyChar();
        int count = 0;
        for(int i = 0; i < txtPercCost.getText().length(); i++)
        if(txtPercCost.getText().charAt(i) == '.')
        count++;
        if (!((key >= 48 && key <= 57) || key == '.') || (key == '.' && count >= 1))
        evt.consume();
        if(txtPercCost.getText().isEmpty() && key == '.')
        evt.consume();
        if(txtPercCost.getText().contains(".")){
            if(txtPercCost.getText().substring(txtPercCost.getText().indexOf('.'), txtPercCost.getText().length()).length() >= 3)
            evt.consume();
        }
        else{
            if(txtPercCost.getText().length() >= 3 && key != '.')
            evt.consume();
        }
    }//GEN-LAST:event_txtPercCostKeyTyped

    private void txtPercCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPercCostActionPerformed
        lblTotalCost.setText("$" + (new BigDecimal(txtPercCost.getText().isEmpty() ? 0 : (Float.valueOf(txtPercCost.getText())/100)).multiply(repairCostsList.get(cmbKindOfRepair.getSelectedIndex()-1)).setScale(2, RoundingMode.HALF_UP)));
    }//GEN-LAST:event_txtPercCostActionPerformed

    private void txtPercCostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPercCostFocusLost
        lblTotalCost.setText("$" + (new BigDecimal(txtPercCost.getText().isEmpty() ? 0 : (Float.valueOf(txtPercCost.getText())/100)).multiply(repairCostsList.get(cmbKindOfRepair.getSelectedIndex()-1)).setScale(2, RoundingMode.HALF_UP)));
    }//GEN-LAST:event_txtPercCostFocusLost

    private void cmbKindOfRepairItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKindOfRepairItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) { //Verifica que se haya seleccionado un elemento
            if(cmbKindOfRepair.getSelectedIndex() == 0){ //Verifica que se haya seleccionado una ruta
                txAreaRepairDesc.setText("Seleccione un tipo de reparación...");
                txtPercCost.setEnabled(false);
                txtPercCost.setText("");
                lblTotalCost.setText("$ 0");
            }else{ //Carga el combo box con las placas
                txAreaRepairDesc.setText(repairDescriptionsList.get(cmbKindOfRepair.getSelectedIndex() - 1));
                if(cmbKindOfRepair.isEnabled())
                txtPercCost.setEnabled(true);
                txtPercCost.setText("100");
                lblTotalCost.setText("$" + (new BigDecimal(txtPercCost.getText().isEmpty() ? 0 : (Float.valueOf(txtPercCost.getText())/100)).multiply(repairCostsList.get(cmbKindOfRepair.getSelectedIndex()-1)).setScale(2, RoundingMode.HALF_UP)));

            }
        }
    }//GEN-LAST:event_cmbKindOfRepairItemStateChanged

    private void cmbCustomerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCustomerItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED) { //Verifica que se haya seleccionado un elemento
            if(cmbCustomer.getSelectedIndex() == 0){ //Verifica que se haya seleccionado una ruta
                cmbVehicle.removeAllItems(); //Limpia el combo box de placas
                cmbVehicle.addItem("Seleccione un cliente");
                cmbVehicle.setEnabled(false); //Desactiva el combo box de placas
            }else{ //Carga el combo box con las placas
                loadVehicles(customers_ids.get(cmbCustomer.getSelectedIndex()-1)); //Carga el combo box con las placas
                if(cmbCustomer.isEnabled())
                cmbVehicle.setEnabled(true);
                if(cmbVehicle.getItemCount() == 1){
                    cmbVehicle.removeAllItems();
                    cmbVehicle.addItem("El cliente no tiene vehículos registrados");
                    cmbVehicle.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_cmbCustomerItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JComboBox<String> cmbKindOfRepair;
    private javax.swing.JComboBox<String> cmbVehicle;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotalCost;
    private javax.swing.JTextArea txAreaRepairDesc;
    private javax.swing.JTextArea txtAreaAdditionalAnotations;
    private javax.swing.JTextField txtDateDelivery;
    private javax.swing.JTextField txtDateReception;
    private javax.swing.JTextField txtPercCost;
    // End of variables declaration//GEN-END:variables

    private boolean isFilled(){
    if(cmbCustomer.getSelectedIndex() == 0||
        cmbVehicle.getSelectedIndex() == 0 ||
        cmbKindOfRepair.getSelectedIndex() == 0 ||
        txtPercCost.getText().isEmpty() ||
        new BigDecimal(txtPercCost.getText()).compareTo(new BigDecimal("0")) <= 0){
            return false;
        }else{
            return true;
        }
    }
    
    private void loadCustomers(){ //Carga el combo de rutas
        customers_ids = new ArrayList<>(); //Crea una lista de enteros para los ids de las rutas
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT cliente_nombre, cliente_id FROM cliente"; //Query para cargar el combo
        Statement st; //Crea el Statement
        try{ 
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query);  //Ejecuta la consulta
            
            cmbCustomer.removeAllItems(); //Limpia el combo box
            cmbCustomer.addItem("Seleccione un cliente"); //Añade un item al combo box
            while(rs.next()){ //Recorre el resultado
                cmbCustomer.addItem((String)(rs.getString("cliente_id") + " - " + rs.getString("cliente_nombre"))); //Añade el nombre de la ruta al combo box
                customers_ids.add(rs.getInt("cliente_id")); //Guarda el id de la ruta en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de clientes" + e); //Imprime un mensaje de error
        }
    }
    
    private void loadVehicles(int id_cliente){ //Carga el horario de la ruta seleccionada en los txt
        vehicles_ids = new ArrayList<>(); //Lista de enteros para guardar el id del autobus
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT * FROM vehiculo WHERE cliente_id =" + id_cliente; //Crea la consulta
        Statement st; //Crea el Statement
        try{
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query); //Ejecuta la consulta
             
            cmbVehicle.removeAllItems(); //Limpia el combo box
            cmbVehicle.addItem("Seleccione un vehiculo"); //Añade un item al combo box
            
            while(rs.next()){ //Recorre el resultado
                cmbVehicle.addItem(rs.getString("marca_vehiculo") + ' ' + rs.getString("modelo_vehiculo") + ' ' + rs.getString("anio_vehiculo")); //Añade la placa del autobus al combo box
                vehicles_ids.add(rs.getInt("id_vehiculo")); //Guarda el id del autobus en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de placas de VEHICULOS "+ e); //Imprime un mensaje de error
        }
    }

    private void loadKindOfRepairs(){ //Carga el combo de rutas
        kOfRepairs_ids = new ArrayList<>(); //Crea una lista de enteros para los ids de las rutas
        repairDescriptionsList = new ArrayList<>();
        repairCostsList = new ArrayList<>();
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT tipo_reparacion_id, t_rep_nombre, t_rep_descripcion, t_rep_costo_total FROM tipo_reparacion"; //Query para cargar el combo
        Statement st; //Crea el Statement
        try{ 
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query);  //Ejecuta la consulta
            
            cmbKindOfRepair.removeAllItems(); //Limpia el combo box
            cmbKindOfRepair.addItem("Seleccione una reparación"); //Añade un item al combo box
            while(rs.next()){ //Recorre el resultado
                cmbKindOfRepair.addItem((String)(rs.getString("t_rep_nombre"))); //Añade el nombre de la ruta al combo box
                repairCostsList.add(rs.getBigDecimal("t_rep_costo_total"));
                repairDescriptionsList.add(rs.getString("t_rep_descripcion") + '\n' + '$' + rs.getFloat("t_rep_costo_total"));
                kOfRepairs_ids.add(rs.getInt("tipo_reparacion_id")); //Guarda el id de la ruta en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de TiposREPARACION " + e); //Imprime un mensaje de error
        }
    }
}
