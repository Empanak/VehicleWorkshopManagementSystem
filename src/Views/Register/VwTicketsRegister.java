package Views.Register;
import Connection.Connect;
import Controller.CtrlPurchaseReceipt;
import Controller.CtrlRepair;
import Entities.PurchaseReceipt;
import Entities.Repair;
import Entities.User;
import Models.CustomTableCellRenderer;
import java.awt.event.ItemEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VwTicketsRegister extends javax.swing.JPanel {

    private User currentUser;
    private DefaultTableModel model = new DefaultTableModel();
    private List<Integer> kOfRep_id_fromTable;
    private List<Integer> kOfRepairs_ids;
    private List<String> repairDescriptionsList;
    private List<BigDecimal> repairCostsList;
    private Map<Integer, String> additionalNotes;
    private int filaSeleccionada, idRepair;
    private boolean is_selected = false;
    public VwTicketsRegister(User currentUser) {
        this.currentUser = currentUser;
        initComponents();
        setName("TicketsRegister");
        model.addColumn("ID");
        model.addColumn("ID Cliente");
        model.addColumn("ID Vehiculo");
        model.addColumn("Ingreso");
        model.addColumn("Salida");
        model.addColumn("Coste total");
        tbRepairs.setModel(model);
        scpRepairs.setViewportView(tbRepairs);
        tbRepairs.addMouseListener(new MouseAdapter(){ // Asignar evento de mouse a la tabla de usuarios para seleccionar una fila
            @Override
            public void mouseClicked(MouseEvent e){ // Evento de mouse cuando es clickeada la tabla
                is_selected = true;
                filaSeleccionada = tbRepairs.getSelectedRow();
            }
        });
        loadKoFTable();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpRepairs = new javax.swing.JScrollPane();
        tbRepairs = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column){
                return false;
            };
        };
        jPanel13 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnFinalizarRep = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaObservations = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(65, 80, 87));

        tbRepairs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbRepairs.getTableHeader().setReorderingAllowed(false);
        tbRepairs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbRepairs.setMaximumSize(new java.awt.Dimension(80, 80));
        scpRepairs.setViewportView(tbRepairs);

        jPanel13.setBackground(new java.awt.Color(65, 80, 87));
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setPreferredSize(new java.awt.Dimension(500, 230));

        btnFinalizarRep.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        btnFinalizarRep.setText("Finalizar reparación y generar ticket.");
        btnFinalizarRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarRepActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        jLabel3.setText("Observaciones finales:");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtAreaObservations.setColumns(20);
        txtAreaObservations.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        txtAreaObservations.setRows(5);
        txtAreaObservations.setToolTipText("Este campo puede quedar vacío si lo desea.");
        txtAreaObservations.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAreaObservations.setLineWrap(true);
        txtAreaObservations.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAreaObservationsKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtAreaObservations);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(btnFinalizarRep)))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnFinalizarRep)
                .addContainerGap(449, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 740, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 756, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scpRepairs, javax.swing.GroupLayout.PREFERRED_SIZE, 787, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 757, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(794, 794, 794)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpRepairs, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFinalizarRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarRepActionPerformed
        CtrlRepair ctrlRepair = new CtrlRepair();
        CtrlPurchaseReceipt ctrlPurchaseReceipt = new CtrlPurchaseReceipt();
        if(is_selected){
            int cliente_id = Integer.parseInt(model.getValueAt(filaSeleccionada, 1).toString());
            int vehiculo_id = Integer.parseInt(model.getValueAt(filaSeleccionada, 2).toString());
            int reparacion_id = Integer.parseInt(model.getValueAt(filaSeleccionada, 0).toString());
            int tipo_reparacion_id = kOfRep_id_fromTable.get(filaSeleccionada);
            BigDecimal costoTotal = new BigDecimal(model.getValueAt(filaSeleccionada, 5).toString());

            String observaciones_finales = txtAreaObservations.getText().isEmpty() ? null : txtAreaObservations.getText();
            LocalDate localDate = LocalDate.now();
            Date sqlDate = Date.valueOf(localDate);
            PurchaseReceipt purchaseReceipt = new PurchaseReceipt(0, cliente_id, vehiculo_id, reparacion_id, tipo_reparacion_id, costoTotal, observaciones_finales);
            Repair repair = new Repair(reparacion_id, sqlDate);
            if(JOptionPane.YES_OPTION ==JOptionPane.showConfirmDialog(
                null,
                "¿Desea dar por finalizada esta reparación?\n(Esta acción no se puede deshacer)",
                "Confirmación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE)){
                if(ctrlRepair.endRepair(repair, currentUser)){
                    if(ctrlPurchaseReceipt.add(purchaseReceipt, currentUser)){
                        JOptionPane.showMessageDialog(null, "Reparacion finalizada, ticket generado.", "Ticket generado", JOptionPane.INFORMATION_MESSAGE);
                        loadKoFTable();
                        loadTable();
                    }
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Seleccione una reparación", "Registro no seleccionado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnFinalizarRepActionPerformed

    private void txtAreaObservationsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaObservationsKeyTyped
        if(txtAreaObservations.getText().length() >= 170)
        evt.consume();
    }//GEN-LAST:event_txtAreaObservationsKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinalizarRep;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane scpRepairs;
    private javax.swing.JTable tbRepairs;
    private javax.swing.JTextArea txtAreaObservations;
    // End of variables declaration//GEN-END:variables
private void loadTable(){
    additionalNotes = new HashMap<>();
    Connection cn = Connect.connect(currentUser);
    String query = "SELECT rep_id, cliente_id, vehiculo_id, reparacion_fecha_ingreso, reparacion_fecha_salida, reparacion_coste_total, rep_notas_adicionales FROM reparacion WHERE reparacion_fecha_salida IS NULL"; //Query para cargar la tabla de autobuses
        try(PreparedStatement st = cn.prepareStatement(query)){ //Prepara la sentencia
            ResultSet rs = st.executeQuery(); //Ejecuta la sentencia
            while(model.getRowCount()>0){ //Elimina todas las filas de la tabla
                model.removeRow(0); //Elimina la fila
            }

            while(rs.next()){ //Recorre el resultado
                Object fila[] = new Object[6]; //Crea un arreglo de objetos
                for(byte i = 0; i < 6; i++){ //Recorre el arreglo
                    if(rs.getObject(i+1) != null)
                        fila[i] = rs.getObject(i+1); //Asigna el valor correspondiente
                    else
                        if(i == 4)
                            fila[i] = "Pendiente";
                }
                additionalNotes.put(rs.getInt("rep_id"), rs.getString("rep_notas_adicionales"));
                model.addRow(fila); //Agrega la fila al modelo
            }
            st.close(); //Cierra la sentencia
            cn.close(); //Cierra la base de datos
        }catch(SQLException e){ //Si hay un error
            System.out.println("Carga de datos fallida " + e); //Imprime un mensaje de error
        }
        for (int i = 0; i < tbRepairs.getColumnCount(); i++) {
            tbRepairs.getColumnModel().getColumn(i).setHeaderRenderer(new CustomTableCellRenderer());
        }
        tbRepairs.setDefaultRenderer(java.lang.Object.class, new CustomTableCellRenderer());
        is_selected = false;
}

private void loadKindOfRepairs(){ //Carga el combo de rutas
        kOfRepairs_ids = new ArrayList<>(); //Crea una lista de enteros para los ids de las rutas
        repairDescriptionsList = new ArrayList<>();
        repairCostsList = new ArrayList<>();
        Connection cn = Connect.connect(currentUser); //Conecta con la base de datos
        String query = "SELECT tipo_reparacion_id, t_rep_nombre, t_rep_descripcion, t_rep_costo_total FROM tipo_reparacion"; //Query para cargar el combo
        Statement st; //Crea el Statement
        try{ 
            st = cn.createStatement(); //Crea la consulta
            ResultSet rs = st.executeQuery(query);  //Ejecuta la consulta
            while(rs.next()){ //Recorre el resultado
                repairCostsList.add(rs.getBigDecimal("t_rep_costo_total"));
                repairDescriptionsList.add(rs.getString("t_rep_descripcion") + '\n' + '$' + rs.getFloat("t_rep_costo_total"));
                kOfRepairs_ids.add(rs.getInt("tipo_reparacion_id")); //Guarda el id de la ruta en la lista
            }
            st.close(); //Cierra el statement
            cn.close(); //Cierra la conexion
        }catch(SQLException e){ //Si hay un error
            System.out.println("Fallo la carga de TiposREPARACION " + e); //Imprime un mensaje de error
        }
    }

    private void loadKoFTable(){
        Connection cn = Connect.connect(currentUser);
        String query = "SELECT tipo_reparacion_id FROM reparacion WHERE reparacion_fecha_salida IS NULL";
        kOfRep_id_fromTable = new ArrayList<>();
        Statement st;
        try{
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while(rs.next()){
                kOfRep_id_fromTable.add(rs.getInt("tipo_reparacion_id"));
            }
            st.close();
            cn.close();
        }catch(SQLException e){
            System.out.println("Fallo la carga de tiposReparacionTabla " + e);
        }
    }


}